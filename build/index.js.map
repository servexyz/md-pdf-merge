{"version":3,"sources":["../index.js"],"names":["merge","require","md2pdf","path","fs","chalk","log","console","basename","split","reverse","convertMarkdownToPDF","inputDir","outputDir","readdirSync","filter","file","includes","map","md","join","mdPath","filename","pdfPath","from","to","createMergedPDF","directoryOfPDFs","destFile","pdfs","destFilePath","pdf","push","length","err","red","numFiles","error","blue","input","__dirname","output"],"mappings":"AAAA,MAAMA,QAAQC,QAAQ,gBAAR,CAAd;;AACA,MAAMC,SAASD,QAAQ,cAAR,CAAf;;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;;AACA,MAAMG,KAAKH,QAAQ,UAAR,CAAX;;AACA,MAAMI,QAAQJ,QAAQ,OAAR,CAAd;;AACA,MAAMK,MAAMC,QAAQD,GAApB;;AAEA,SAASE,QAAT,CAAkBL,IAAlB,EAAwB;AACtB,SAAOA,KAAKM,KAAL,CAAW,GAAX,EAAgBC,OAAhB,GAA0B,CAA1B,CAAP;AACD;;AAED,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,SAAxC,EAAmD;AACjDT,KACGU,WADH,CACeF,QADf,EAEGG,MAFH,CAEUC,QAAQ;AACdV,QAAK,SAAQU,IAAK,EAAlB,EADc,CAEd;;AACA,WAAOA,KAAKC,QAAL,CAAc,KAAd,KAAwBD,KAAKC,QAAL,CAAc,KAAd,CAA/B;AACD,GANH,EAOGC,GAPH,CAOOC,MAAM;AACT,WAAOhB,KAAKiB,IAAL,CAAUR,QAAV,EAAoBO,EAApB,CAAP;AACD,GATH,EAUGD,GAVH,CAUOG,UAAU;AACbf,QAAK,WAAUe,MAAO,EAAtB;AACA,QAAIC,WAAWd,SAASa,MAAT,CAAf;AACA,QAAIE,UAAUpB,KAAKiB,IAAL,CAAUP,SAAV,EAAsB,GAAES,QAAS,MAAjC,CAAd;AACA,WAAOpB,SACJsB,IADI,CACCH,MADD,EAEJI,EAFI,CAEDF,OAFC,CAAP;AAGD,GAjBH;AAkBD;;AAED,SAASG,eAAT,CAAyBC,eAAzB,EAA0CC,WAAW,YAArD,EAAmE;AACjE,MAAIC,OAAO,EAAX;AACA,MAAIC,eAAe3B,KAAKiB,IAAL,CAAUO,eAAV,EAA2BC,QAA3B,CAAnB;AACAxB,KAAGU,WAAH,CAAea,eAAf,EAAgCT,GAAhC,CAAoCa,OAAO;AACzCF,SAAKG,IAAL,CAAUD,GAAV;AACD,GAFD;;AAGA,MAAIF,KAAKI,MAAL,GAAc,CAAlB,EAAqB;AACnBjC,UAAM6B,IAAN,EAAYC,YAAZ,EAA0BI,OAAO;AAC/B,UAAIA,GAAJ,EAAS;AACP5B,YAAK,yBAAwBD,MAAM8B,GAAN,CAAUJ,GAAV,CAAe,EAA5C;AACD;AACF,KAJD;AAKD,GAND,MAMO;AACLK,eAAWP,KAAKI,MAAL,EAAX;AACA1B,YAAQ8B,KAAR,CACG,2DAA0DhC,MAAMiC,IAAN,CACzDF,QADyD,CAEzD,EAHJ;AAKD;AACF,C,CAED;;;AACA,MAAMG,QAAQpC,KAAKiB,IAAL,CAAUoB,SAAV,EAAqB,wBAArB,CAAd;AACA,MAAMC,SAAStC,KAAKiB,IAAL,CAAUoB,SAAV,EAAqB,yBAArB,CAAf;AAEA7B,qBAAqB4B,KAArB,EAA4BE,MAA5B;AACAf,gBAAgBe,MAAhB","file":"index.js","sourcesContent":["const merge = require(\"easy-pdf-merge\");\nconst md2pdf = require(\"markdown-pdf\");\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst chalk = require(\"chalk\");\nconst log = console.log;\n\nfunction basename(path) {\n  return path.split(\"/\").reverse()[0];\n}\n\nfunction convertMarkdownToPDF(inputDir, outputDir) {\n  fs\n    .readdirSync(inputDir)\n    .filter(file => {\n      log(`File: ${file}`);\n      //TODO: Replace with regex\n      return file.includes(\".md\") || file.includes(\".MD\");\n    })\n    .map(md => {\n      return path.join(inputDir, md);\n    })\n    .map(mdPath => {\n      log(`mdPath: ${mdPath}`);\n      let filename = basename(mdPath);\n      let pdfPath = path.join(outputDir, `${filename}.pdf`);\n      return md2pdf()\n        .from(mdPath)\n        .to(pdfPath);\n    });\n}\n\nfunction createMergedPDF(directoryOfPDFs, destFile = \"merged.pdf\") {\n  let pdfs = [];\n  let destFilePath = path.join(directoryOfPDFs, destFile);\n  fs.readdirSync(directoryOfPDFs).map(pdf => {\n    pdfs.push(pdf);\n  });\n  if (pdfs.length > 1) {\n    merge(pdfs, destFilePath, err => {\n      if (err) {\n        log(`Failed to merge PDFs. ${chalk.red(pdf)}`);\n      }\n    });\n  } else {\n    numFiles = pdfs.length++;\n    console.error(\n      `Merge requires at least 2 PDFs. Your directory contains ${chalk.blue(\n        numFiles\n      )}`\n    );\n  }\n}\n\n//TEST\nconst input = path.join(__dirname, \"../tests/sandbox/input\");\nconst output = path.join(__dirname, \"../tests/sandbox/output\");\n\nconvertMarkdownToPDF(input, output);\ncreateMergedPDF(output);\n"]}